#+TITLE: Faking It
#+DESCRIPTION: The Art of Testing Using Verified Fakes
#+KEYWORDS: Best Practice, Testing, AWS, tdd, api, linux, OpenStack, docker, cloud
#+DATE: Thursday 23 July 2015
#+AUTHOR: Richard Wall (@wallrj)
#+EMAIL: richard.wall@clusterhq.com
#+REVEAL_THEME: night
#+REVEAL_TRANS: linear
#+REVEAL_ROOT: //cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL-SLIDE-NUMBER: t
#+REVEAL_SLIDE_HEADER:
#+REVEAL_SLIDE_FOOTER:
#+OPTIONS: timestamp:nil author:nil num:nil toc:nil reveal_rolling_links:nil
#+OPTIONS: reveal_history:t

* Introduction

  * Problems (5)
  * Solution (15)
  * Questions (5)

* Problem 1: Proliferation of mocks

  #+BEGIN_QUOTE
  Everyone made their own mock objects.
  We had N different implementations of a mock.
  When the real code changed, you have to find all N mocks and update them.
  #+END_QUOTE

  http://pyvideo.org/video/629/stop-mocking-start-testing
  http://nedbatchelder.com/blog/201206/tldw_stop_mocking_start_testing.html

  #+BEGIN_NOTES
  * PyCon 2012
  * Augie Fackler
  * Nathaniel Manista
  * Ned Batchelder
  * Examples?
  #+END_NOTES

** Twisted (for example)

  #+BEGIN_SRC sh
  $ egrep --no-filename --only-matching --recursive 'class Fake[^(:]+' * \
    | sort \
    | uniq -c
    | sort -n
  #+END_SRC

  #+BEGIN_NOTES
  * Let's pick on Twisted
  #+END_NOTES

** Twisted (for example)
  #+BEGIN_SRC sh
  ...
      2 class FakeScheduler
      2 class FakeSentence
      2 class FakeSocket
      2 class FakeStdio
      2 class FakeWarning
      3 class FakeService
      4 class FakeFile
      5 class FakeResolver
      5 class FakeStream
      5 class FakeTransport
      6 class FakeReactor
      7 class FakeProtocol
  #+END_SRC

  #+BEGIN_NOTES
  * Doesn't show the paths
  * Duplicate Fakes in the same file!
  * ...But this may not be fair.
  #+END_NOTES

* Problem 2: Inaccurate mocks

** Nova Docker (for example)

   https://github.com/stackforge/nova-docker

  #+BEGIN_NOTES
  * An OpenStack Nova driver
  * Manages Docker containers as Nova instances.
  * Haven't used it...yet.
  #+END_NOTES


** Nova Docker (for example)

  #+BEGIN_SRC python
  In [2]: from novadocker.tests.virt.docker.mock_client import MockClient
  In [11]: from docker.client import Client

  In [13]: real_client = Client()
  In [14]: fake_client = MockClient()
  #+END_SRC

  #+BEGIN_NOTES
  * docker-py -- a Python wrapper around the Docker REST API.
  * Let's compare the behaviour of real and the fake clients.
  * Again it may be an unfair comparison.
  * I haven't checked with the authors
  #+END_NOTES


** Nova Docker (for example)

  #+BEGIN_SRC python
  In [16]: real_client.create_container(image='busybox:latest')
  Out[16]:
  {u'Id': u'db9d42e52e7a4a53b7d82bd38c1d06af2cc65a32f8d73747dff6783d4ba3c886',
   u'Warnings': None}
  #+END_SRC

  #+BEGIN_NOTES
  * dictionary containing
  * 64 byte hex encoded string
  #+END_NOTES


** Nova Docker (for example)

  #+BEGIN_SRC python
    In [17]: fake_client.create_container(image='busybox:latest')
    ---------------------------------------------------------------------------
    TypeError                                 Traceback (most recent call last)
    <ipython-input-17-c0ea284cb1d5> in <module>()
    ----> 1 fake_client.create_container(image='busybox:latest')

    /home/richard/projects/nova-docker/novadocker/virt/docker/client.pyc in wrapper(*args, **kwds)
         34     @functools.wraps(f, assigned=[])
         35     def wrapper(*args, **kwds):
    ---> 36         out = f(*args, **kwds)
         37
         38         def _filter(obj):

    TypeError: create_container() takes exactly 2 arguments (1 given)
  #+END_SRC

  #+BEGIN_NOTES
  * Method signature differences
  * `image` is required,
  * but in the fake it's called `image_name`
  #+END_NOTES

** Nova Docker (for example)

  #+BEGIN_NOTES
  * There are other differences too
  * but not enough time to list them all here
  #+END_NOTES

** Can we do better?

* Solution

* A "verified" fake

  A class that:

  * Provides the same interface.
  * Passes the same tests.
  * Ideally maintained alongside the real implementation.

* docker-py

  #+BEGIN_NOTES
  * Something close to home.
  * Flocker calls the Docker API using ``docker-py``
  * There are other differences too
  * but not enough time to list them all here
  * Anyone else looking for a docker-py fake?
  #+END_NOTES

* docker-py

  #+BEGIN_QUOTE
  Any usage of docker-py requires unit testing.
  The latter requires a Fake client that does not require a docker daemon to be running.
  Providing a mock implementation will avoid every single user to re-implement its own mock.
  This is a nice to have.
  #+END_QUOTE

  https://github.com/docker/docker-py/issues/109

  #+BEGIN_NOTES
  * Great minds think alike!
  * Nice-to-have?
  #+END_NOTES

* So let's make a start

* Where is the docker-py API defined?

  * Is it formally defined?
  * Look at the API documentation.

* API Docs

  https://docker-py.readthedocs.org/en/stable/api/

  docs/api.md

  #+BEGIN_NOTES
  * Manually synchronised with the actual API
  * I guess?
  * Perhaps we can improve that.
  * Start with an interface...
  #+END_NOTES

* IDockerClient

  #+BEGIN_SRC python
  from zope.interface import Interface

  class IDockerClient(Interface):
      """
      Create, delete and list docker containers.
      """

      def create_container(image, name=None):
          """
          Creates a container that can then be ``.start()`` ed. Parameters are
          similar to those for the docker run command except it doesn't support
          the attach options (-a).

          http://docker-py.readthedocs.org/en/latest/api/#create_container

          :param str image: The image to run.
          :param str name: A name for the container.
          :returns:  A ``dict`` with an image 'Id' key and a 'Warnings' key.
          """
  #+END_SRC

  #+BEGIN_NOTES
  * Start by defining an interface.
  * Zope is my preference.
  * There may be other options
  * Discuss at the end
  #+END_NOTES

* And a test to go with it.

  #+BEGIN_SRC python
  class IDockerClientTestsMixin(object):
      """
      Tests for ``IDockerClient``.
      """
      def test_interface(self):
          """
          The implementation provides ``IDockerClient``.
          """
          self.assertTrue(verifyObject(IDockerClient, self.client))
  #+END_SRC

  #+BEGIN_NOTES
  * ``zope.interface`` provides tools that'll help me to verify that my implementations match the interface.
  * ``verifyObject``
  * ``verifyClass``
  * check that the ``client`` (an instance) is a correct implementation of the interface.
  * Test mixin so they can be run against the real and fake implementations of IDockerClient...
  * We'll look at how to use the mixin in a moment...
  * But for now, let's concentrate on the results...
  #+END_NOTES

* And a test to go with it

  #+BEGIN_SRC sh

$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_interface ...                                                     [OK]
tests.test
  FakeDockerClientTests
    test_interface ...                                                     [OK]

-------------------------------------------------------------------------------
Ran 2 tests in 0.042s

PASSED (successes=2)
  #+END_SRC

  #+BEGIN_NOTES
  * Test mixin so they can be run against the real and fake implementations of IDockerClient...
  * So let's take a look at how we run the tests
  * Against real and fake implementations of the interface.
  #+END_NOTES


* A public testtools module

  #+BEGIN_NOTES
  * A public module, which can be easily imported by consumers,
  * not hidden with the tests where it may not be packaged and
  * May not be importable by consumers of the library.
  * Contains the verified fake and the shared tests.
  #+END_NOTES

* A TestsMixin

  #+BEGIN_NOTES
  * Tests defined in a test "mixin"
  #+END_NOTES

* A TestCase factory

  #+BEGIN_SRC python

def make_idockerclient_tests(dockerclient_factory):
    """
    Return a ``TestCase`` with tests for verifying that
    ``docker_client_factory`` adheres to ``IDockerClient``.
    """
    class Tests(IDockerClientTestsMixin, TestCase):
        def setUp(self):
            self.client = dockerclient_factory()

    return Tests
  #+END_SRC

  #+BEGIN_NOTES
  * a function that accepts an implementation factory...
  * a function that can be called to generate an instance of the implementation
  * returns a TestCase instance
  * whose tests will operate on the generated instance.
  * Build a ``TestCase`` subclass with a ``setUp`` method that calls the implementation factory.
  * Naming convention...``make_idockerclient_tests``
  * Signature convention...``make_idockerclient_tests(dockerclient_factory=...)``
  #+END_NOTES

* Putting it all together

  #+BEGIN_SRC python
class RealDockerClientTests(
        make_idockerclient_tests(
            dockerclient_factory=partial(docker.Client, version='auto')
        )
):
    """
    Tests for ``docker.Client`` adherence to ``IDockerClient``.
    """
  #+END_SRC

  #+BEGIN_NOTES
  * And with that, we can build TestCase's for the real implementation
  * Which lives in `tests.functional`
  #+END_NOTES


* Putting it all together

  #+BEGIN_SRC python
class FakeDockerClientTests(
        make_idockerclient_tests(dockerclient_factory=FakeDockerClient)
):
    """
    Tests for ``FakeDockerClient``.
    """

  #+END_SRC

  #+BEGIN_NOTES
  * And for the fake implementation which live in `tests`
  * And by defining a class that inherits from the dynamically generated TestCase,
  * We have a convenient place to add test documentation strings.
  #+END_NOTES

* And now we can start fleshing out the interface

  #+BEGIN_NOTES
  * So with the skeleton code in place and
  * a mechanism for running the tests against the real and fake implementations
  * we can start filling in the missing interface methods and
  * missing method arguments.
  #+END_NOTES

* Starting with a test for empty list of containers.

  #+BEGIN_SRC python
    def test_containers_empty(self):
        """
        ``IDockerContainers.containers`` returns an empty list if there are no
        running containers.
        """
        self.assertEqual([], self.client.containers())
        """
  #+END_SRC

* Starting with a test for empty list of containers.

  #+BEGIN_SRC python
    def containers(self, quiet=False, all=False):
        return [
            {'Id': container['Id']}
            for container in self._containers.values()
        ]
  #+END_SRC

* Starting with a test for empty list of containers.
  #+BEGIN_SRC sh

$ trial tests.integration_test.RealDockerClientTests tests.test.FakeDockerClientTests
tests.integration_test
  RealDockerClientTests
    test_containers_empty ...                                              [OK]
    test_interface ...                                                     [OK]
tests.test
  FakeDockerClientTests
    test_containers_empty ...                                              [OK]
    test_interface ...                                                     [OK]

-------------------------------------------------------------------------------
Ran 4 tests in 0.079s

PASSED (successes=4)
  #+END_SRC

* Test, write code, refactor, repeat

  #+BEGIN_NOTES
  * Create the real and fake API in lock step.
  * Or start with a bare bones fake API and then write the real implementation.
  #+END_NOTES

* Results

  #+BEGIN_SRC sh
  $ trial tests.test.FakeDockerClientTests tests.integration_test.RealDockerClientTeststests.test
  FakeDockerClientTests
    test_containers_empty ...                                              [OK]
    test_containers_empty_all ...                                          [OK]
    test_containers_quiet_all ...                                          [OK]
    test_created_is_listed ...                                             [OK]
    test_inspect_container ...                                             [OK]
    test_inspect_unknown_container ...                                     [OK]
    test_interface ...                                                     [OK]
    test_remove_container ...                                              [OK]
    test_remove_unknown_container ...                                      [OK]
tests.integration_test
  RealDockerClientTests
    test_created_is_listed ...                                             [OK]
    test_inspect_container ...                                             [OK]
    test_inspect_unknown_container ...                                     [OK]
    test_interface ...                                                     [OK]
    test_remove_container ...                                              [OK]
    test_remove_unknown_container ...                                      [OK]

-------------------------------------------------------------------------------
Ran 15 tests in 0.409s

PASSED (successes=15)
  #+END_SRC

* Complications

** Chicken-and-egg

   * Can't test ``create_container`` until we've got a way to list ``containers``
   * Can't test list ``containers`` until we've got a way to ``create_container``
   * Implement both together.

   #+BEGIN_NOTES
   * Creates a container but doesn't start it.
   * Demonstrated in earlier example
   * Our ``containers`` API currently only returns running containers, so we'll need to modify it a little.
   * We can implement a test that creates both of these behaviours.
   * Creates and lists the newly created container.
   * ``docker.Client.create_container`` and ``containers`` have masses of arguments (too many??) but we'll start with the bare minimum; add only what we need to the interface.
   #+END_NOTES

** Chicken-and-egg

   * Can't clean up the test containers until we've implemented ``remove_container``.
   * Can't test ``remove_container`` until we've implemented ``create_container`` and list ``containers``.

** Test public APIs not implementation details

* Further Reading

** IBlockDeviceAPI

   https://github.com/ClusterHQ/flocker/

   #+BEGIN_NOTES
   * Flocker Block device backend
   * Simulate virtual block devices
   * AWS EBS
   * OpenStack Cinder
   * A loopback device implementation
   #+END_NOTES


** Mimic

   https://github.com/rackerlabs/mimic

   #+BEGIN_NOTES
   * Not quite what I've described here
   * Simulates the OpenStack Nova REST API
   * Can be primed with various success and error responses.
   * Tracks the state of a Nova REST session
   * Even the authentication.
   #+END_NOTES


** Eliot

   https://github.com/ClusterHQ/eliot/

   #+BEGIN_NOTES
   * Structured logging library
   * MemoryLogger
   * Implements ILogger
   * validateLogging
   * assertHasAction
   #+END_NOTES

** Separate your fakes and your inspectors

   https://glyph.twistedmatrix.com/2015/05/separate-your-fakes-and-your-inspectors.html

* Summary

  #+BEGIN_NOTES
  * Some of the problems with un-verified fakes and mocks.
  * Some examples of those problems
  * An example of writing a verified fake for an existing library
  * And the problems associated with that.
  * Other examples of verified fakes written in Python.
  #+END_NOTES

* Questions?
  * Richard Wall: https://github.com/wallrj
  * ClusterHQ: https://github.com/ClusterHQ
